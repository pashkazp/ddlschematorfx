package com.depavlo.ddlschematorfx.docs; // Рекомендовано створити окремий пакет для документації

/**
 * Технічне завдання на розробку десктопного додатку для порівняння та синхронізації схем баз даних Oracle.
 *
 * ## 1. Вступ
 *
 * Це технічне завдання описує вимоги до розробки десктопного додатку, призначеного для порівняння та синхронізації схем баз даних Oracle.
 * Додаток має надати зручний графічний інтерфейс для виконання ключових операцій, таких як витягнення схеми, порівняння двох схем,
 * генерація SQL-скриптів синхронізації, застосування цих скриптів, а також інтеграція з GitLab для збереження конфігурацій та історії міграцій.
 *
 * ## 2. Призначення та цілі проєкту
 *
 * Основне призначення додатку – автоматизувати процес виявлення відмінностей між схемами баз даних Oracle та генерації скриптів для усунення цих відмінностей.
 * Це дозволить спростити та прискорити процеси розгортання змін та підтримки актуального стану баз даних у різних середовищах (розробка, тестування, продакшн).
 *
 * Цілі проєкту:
 * - Розробити надійний інструмент для порівняння схем Oracle.
 * - Забезпечити точну генерацію SQL-скриптів синхронізації.
 * - Реалізувати зручний та інтуїтивно зрозумілий десктопний інтерфейс.
 * - Інтегруватися з GitLab для управління конфігураціями та історією змін.
 * - Використовувати виключно безкоштовні та сучасні технології.
 *
 * ## 3. Функціональні вимоги
 *
 * Додаток має реалізувати наступні функціональні можливості:
 *
 * ### 3.1. Управління підключеннями до баз даних
 *
 * - **Збереження параметрів підключення:** Можливість збереження кількох наборів параметрів підключення до різних баз даних Oracle (URL, користувач, пароль, назва схеми за замовчуванням, опис).
 * - **Локальне зберігання конфігурацій:** Збереження параметрів підключень локально на машині користувача.
 * - **Шифрування паролів:** Паролі мають зберігатися у зашифрованому вигляді з використанням Jasypt.
 * - **Тестування підключення:** Можливість перевірити з'єднання з базою даних за введеними або збереженими параметрами.
 * - **Редагування та видалення збережених підключень.**
 *
 * ### 3.2. Витягнення схеми
 *
 * - **Витягнення з БД:** Отримання повної структури схеми безпосередньо з підключеної бази даних Oracle за вибраним підключенням та назвою схеми.
 * - **Використання DBMS_METADATA.GET_DDL:** Використання стандартного Oracle пакету `DBMS_METADATA` для отримання DDL об'єктів. Врахування параметрів `DBMS_METADATA` для отримання повного DDL, включаючи специфічні для Oracle 21c можливості.
 * - **Обробка NLS параметрів:** Встановлення однакових NLS параметрів сесії перед викликом `DBMS_METADATA` для уникнення "фальшивих" відмінностей.
 * - **Обробка Edition-Based Redefinition (EBR):** Встановлення відповідної Edition перед викликом `DBMS_METADATA` за необхідності.
 * - **Підтримка широкого спектру об'єктів:** Витягнення DDL для таблиць, колонок, індексів, обмежень (constraints), тригерів, збережених процедур, функцій, пакетів, послідовностей, представлень (views), матеріалізованих представлень (materialized views), синонімів, Database Links, Directory Objects, Jobs, Queues, Types, Java Sources, Libraries, Schedulers, XML Schemas, edition-based objects, invisible/hidden columns, hybrid partitioned tables, auto-list partitioning та інших відповідних об'єктів Oracle 21c.
 * - **Виключення прихованих об'єктів:** Виключення з витягнення внутрішніх об'єктів Oracle (наприклад, послідовностей, пов'язаних з identity columns, що починаються на `ISEQ$$_`).
 * - **Використання наданої схеми (DDL-файл):** Можливість завантаження та використання схеми зі стандартного SQL DDL файлу. Парсинг DDL файлу для побудови внутрішнього представлення схеми.
 *
 * ### 3.3. Порівняння схем
 *
 * - **Вибір схем для порівняння:** Можливість вибрати дві схеми для порівняння (витягнуті з БД або завантажені з DDL).
 * - **Виявлення відмінностей:** Порівняння структур двох схем та виявлення доданих, видалених та змінених об'єктів.
 * - **Деталізація відмінностей:** Надання детальної інформації про знайдені відмінності, включаючи візуальне порівняння DDL для змінених об'єктів.
 * - **Ігнорування несуттєвих відмінностей:** Можливість налаштування ігнорування певних типів відмінностей (наприклад, пробілів, регістру, коментарів).
 * - **Аналіз залежностей:** Визначення залежностей між об'єктами схеми для коректного порядку генерації та виконання скриптів.
 *
 * ### 3.4. Генерація скриптів синхронізації
 *
 * - **Генерація SQL-скриптів:** Створення SQL-скриптів для усунення знайдених відмінностей.
 * - **Розділення скриптів:** Генерація окремих файлів скриптів для різних типів об'єктів та типів змін (CREATE, ALTER, DROP).
 * - **Врахування залежностей:** Генерація скриптів у правильному порядку з урахуванням залежностей об'єктів (топологічне сортування).
 * - **Генерація резервних DDL:** Можливість генерації скриптів для відкату змін (DROP скрипти для об'єктів, що змінюються/видаляються).
 * - **Розділення на "безпечні" та "небезпечні" операції:** Візуальне або логічне розділення згенерованих скриптів на ті, що не несуть ризику втрати даних (наприклад, CREATE INDEX), та ті, що можуть призвести до втрати даних або тривалих блокувань (наприклад, ALTER TABLE DROP COLUMN).
 * - **Врахування ліцензійних аспектів:** Можливість врахування ліцензійних аспектів Oracle (наприклад, Partitioning) при генерації скриптів, можливо, додаючи попередження або опції конфігурації.
 *
 * ### 3.5. Застосування скриптів
 *
 * - **Виконання згенерованих скриптів:** Можливість застосувати згенеровані SQL-скрипти до вибраної бази даних.
 * - **Підтримка транзакцій:** Виконання скриптів в рамках транзакції (якщо можливо і доцільно для певного типу об'єктів).
 * - **Обробка помилок:** Налаштування поведінки при виникненні помилок під час виконання скриптів (зупинитися / продовжити).
 * - **Режим Dry-run:** Можливість виконати скрипти в режимі Dry-run (без фактичного застосування змін до БД), щоб переглянути потенційні помилки.
 * - **Автоматичний бекап:** Можливість автоматичної генерації резервних DDL перед застосуванням змін.
 * - **Логування виконання:** Запис результатів виконання скриптів у журнал аудиту.
 *
 * ### 3.6. Інтеграція з GitLab
 *
 * - **Збереження конфігурацій:** Збереження налаштувань підключень до БД та налаштувань GitLab у визначеній гілці GitLab (у форматі .properties).
 * - **Завантаження конфігурацій:** Завантаження збережених конфігурацій з GitLab.
 * - **Порівняння конфігурацій:** Порівняння поточної конфігурації з конфігурацією, збереженою у GitLab.
 * - **Збереження журналу міграцій та знімків схем:** Збереження інформації про застосовані скрипти та знімків (снапшотів) схеми (отриманих через DBMS_METADATA) у визначеній гілці GitLab після кожної успішної операції застосування скриптів.
 * - **Автентифікація:** Використання Personal Access Token для автентифікації в GitLab.
 * - **Операції Git:** Виконання базових Git операцій (клонування, коміти, пуші, пули) для управління локальним Git-репозиторієм.
 * - **Взаємодія з GitLab API:** Використання GitLab API для операцій, які неможливо зробити локально (наприклад, створення Merge Request - опціонально, як конфігураційний перемикач).
 *
 * ### 3.7. Аудит та логування
 *
 * - **Журнал аудиту:** Ведення детального журналу всіх ключових операцій (витягнення, порівняння, генерація, застосування скриптів, збереження/завантаження конфігурацій).
 * - **Зміст записів аудиту:** Записи аудиту мають включати: час події, користувача (якщо реалізовано автентифікацію), виконану дію, деталі дії (наприклад, ідентифікатори схем, параметри конфігурації, список застосованих скриптів), статус (успіх/помилка), повідомлення про помилку.
 * - **Перегляд журналу аудиту:** Надання користувачу інтерфейсу для перегляду журналу аудиту з можливістю фільтрації та сортування.
 * - **Логування програми:** Використання стандартного фреймворку логування для запису подій програми (інформація, попередження, помилки).
 *
 * ## 4. Нефункціональні вимоги
 *
 * - **Технології:** Розробка на Java з використанням JavaFX для графічного інтерфейсу.
 * - **Безкоштовність:** Використання виключно безкоштовних бібліотек та інструментів.
 * - **Архітектура:** Трирівнева архітектура (Presentation, Business Logic, Persistence) з чітким розділенням відповідальності.
 * - **Продуктивність:** Забезпечення прийнятної продуктивності при роботі з великими схемами. Використання асинхронних операцій для тривалих процесів (витягнення, порівняння, застосування скриптів) для забезпечення чутливості інтерфейсу.
 * - **Надійність:** Обробка помилок (включаючи помилки БД та мережі).
 * - **Безпека:** Шифрування чутливих даних (паролі БД, токени GitLab).
 * - **Розгортання:** Розповсюдження додатку у вигляді простого JAR-файлу або самодостатнього пакету (з використанням jpackage).
 * - **Підтримка ОС:** Робота додатку на операційних системах Windows та Linux.
 * - **Документація:** Надання документації для користувача та технічної документації для розробників.
 * - **Тестування:** Покриття коду юніт- та інтеграційними тестами.
 *
 * ## 5. Архітектура додатку
 *
 * Додаток буде побудовано на основі трирівневої архітектури:
 *
 * - **Presentation Layer (JavaFX):** Відповідає за графічний інтерфейс користувача. Взаємодіє з Business Logic Layer для отримання даних та ініціації операцій. Використовує FXML для опису інтерфейсу та контролери для обробки подій.
 * - **Business Logic Layer (Чистий Java-код, можливо з DI):** Містить основну логіку програми: управління схемами в пам'яті, алгоритми порівняння, логіка генерації скриптів, аналіз залежностей, управління конфігураціями (взаємодія з Persistence Layer), координація взаємодії між Presentation та Persistence.
 * - **Persistence Layer (JDBC, Jasypt, JGit, java-gitlab-api):** Відповідає за взаємодію із зовнішніми джерелами даних: база даних Oracle (через JDBC), файлова система (збереження конфігурацій, DDL файлів), GitLab (через JGit та GitLab API). Відповідає за отримання DDL через DBMS_METADATA, збереження/завантаження конфігурацій (з шифруванням), виконання SQL-скриптів, взаємодію з Git-репозиторіумом та GitLab API.
 *
 * ## 6. Вибір технологій та бібліотек
 *
 * - **Графічний інтерфейс:** JavaFX.
 * - **Розробка UI:** JavaFX Scene Builder.
 * - **Основна мова:** Java.
 * - **Система збірки:** Maven.
 * - **Взаємодія з БД:** Oracle JDBC Driver (ojdbcX), orai18n.
 * - **Витягнення метаданих (допоміжно):** SchemaCrawler (опціонально, для отримання додаткової метаінформації, якщо DBMS_METADATA недостатньо).
 * - **Шифрування:** Jasypt.
 * - **Взаємодія з Git:** JGit (org.eclipse.jgit).
 * - **Взаємодія з GitLab API:** java-gitlab-api (org.gitlab4j).
 * - **Логування:** Logback.
 * - **Тестування:** JUnit 5.
 * - **Впровадження залежностей (опціонально):** Легковесний DI фреймворк (наприклад, Google Guice).
 * - **Запуск/Налагодження Maven:** exec-maven-plugin, maven-antrun-plugin.
 * - **Визначення ОС (для Ant):** Вбудовані можливості Ant (`<condition>`).
 * - **Пакування (майбутнє):** jpackage (з JDK), можливо, jpackage-maven-plugin.
 *
 * ## 7. Структура даних (Domain Model)
 *
 * Будуть визначені Java-класи для представлення ключових сутностей:
 *
 * - `ConnectionDetails`: Параметри підключення до БД.
 * - `Schema`: Структура схеми (зберігає DDL об'єктів).
 * - `Difference`: Знайдена відмінність між схемами.
 * - `MigrationScript`: Згенерований SQL-скрипт.
 * - `AuditEntry`: Запис журналу аудиту.
 * - Перерахування `DifferenceType` та `ObjectType`.
 *
 * ## 8. Інтерфейс користувача (UI/UX)
 *
 * - **Головне вікно:** Містить меню, панель статусу та центральну область, де відображається вміст залежно від вибраної дії.
 * - **Вікно налаштувань підключень:** Форма для введення та збереження параметрів підключень, список збережених підключень, кнопки для управління (нове, редагувати, видалити, тест підключення, зняти виділення).
 * - **Вікно налаштувань GitLab:** Форма для введення та збереження параметрів GitLab, кнопки для управління конфігурацією GitLab.
 * - **Вікно порівняння схем:** Елементи для вибору двох схем, відображення результатів порівняння (дерево або таблиця відмінностей), можливість перегляду DDL та візуального diff.
 * - **Вікно генерації та перегляду скриптів:** Відображення згенерованих скриптів (розділених за типами), можливість копіювання, збереження у файл, кнопки для застосування скриптів з опціями (dry-run, stop-on-error/continue).
 * - **Вікно перегляду аудиту:** Табличне або спискове відображення записів аудиту з можливістю фільтрації та сортування.
 * - **Індикатори прогресу:** Відображення стану виконання тривалих операцій.
 * - **Діалогові вікна:** Використання стандартних діалогових вікон для повідомлень (інформація, попередження, помилки) та підтверджень.
 *
 * ## 9. Інтеграція
 *
 * - **Інтеграція з Oracle DB:** Через JDBC драйвер.
 * - **Інтеграція з файловою системою:** Для збереження/завантаження конфігурацій та DDL файлів.
 * - **Інтеграція з GitLab:** Через JGit та java-gitlab-api.
 *
 * ## 10. Тестування
 *
 * - **Юніт-тести:** Для бізнес-логіки та шару персистентності.
 * - **Інтеграційні тести:** Тестування взаємодії між шарами та з зовнішніми системами (БД Oracle - з використанням тестової БД, GitLab - з використанням тестового репозиторію).
 * - **Системні тести:** Тестування повного функціонального шляху через UI.
 *
 * ## 11. Розгортання
 *
 * - Збірка проекту за допомогою Maven.
 * - Створення виконуваного JAR-файлу (з усіма залежностями) за допомогою Maven Shade Plugin.
 * - Можливість створення самодостатнього пакету (інсталятора) за допомогою jpackage (планується на пізніших етапах).
 *
 * ## 12. План робіт (високорівневий)
 *
 * 1.  Налаштування базової структури проекту Maven.
 * 2.  Реалізація класів Domain Model.
 * 3.  Реалізація шару Persistence (збереження/завантаження конфігурацій, шифрування, тестування підключення, витягнення схеми).
 * 4.  Реалізація шару Business Logic (управління схемами, порівняння, генерація скриптів, аналіз залежностей).
 * 5.  Розробка графічного інтерфейсу користувача на JavaFX (головне вікно, вікна налаштувань, вікно порівняння, вікно скриптів, вікно аудиту).
 * 6.  Інтеграція шарів Presentation та Business Logic.
 * 7.  Реалізація інтеграції з GitLab.
 * 8.  Реалізація функціоналу застосування скриптів.
 * 9.  Реалізація функціоналу аудиту.
 * 10. Написання тестів.
 * 11. Налаштування збірки виконуваного JAR.
 * 12. Документування.
 *
 * ## 13. Критерії приймання
 *
 * - Додаток успішно компілюється та запускається.
 * - Реалізовано всі функціональні вимоги згідно з ТЗ.
 * - Дотримано нефункціональних вимог (використання технологій, архітектура, безпека тощо).
 * - Додаток коректно працює на заявлених ОС.
 * - Написано документацію.
 * - Проведено тестування.
 */
public class TechnicalSpecification {

    // Цей клас не містить виконуваного коду,
    // а слугує лише контейнером для тексту технічного завдання.

    public static void main(String[] args) {
        // Приклад, як можна отримати текст завдання (не є частиною самого ТЗ)
        // String tsText = TechnicalSpecification.class.getAnnotation(SomeAnnotationForDocs).value(); // Якщо використовувати анотації
        // Або просто читати коментар інструментами рефлексії, якщо це можливо.
        // Однак, основне призначення - візуальне представлення тексту в IDE.
    }
}
